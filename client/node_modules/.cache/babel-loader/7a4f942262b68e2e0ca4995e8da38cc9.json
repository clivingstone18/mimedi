{"ast":null,"code":"import Geocode from \"react-geocode\";\nGeocode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);\n\nconst getGeoCodeFromAdd = async add => {\n  return new Promise((resolve, reject) => {\n    const center = {};\n    Geocode.fromAddress(add).then(response => {\n      const {\n        lat,\n        lng\n      } = response.results[0].geometry.location;\n      center.lat = lat;\n      center.lng = lng;\n      resolve(center);\n    }, error => {\n      console.error(error);\n    });\n  });\n};\n\nexport const GetAddress = async addresses => {\n  return new Promise((resolve, reject) => {\n    let promises = [];\n\n    for (let i = 0; i < addresses.length; i++) {\n      promises.push(getGeoCodeFromAdd(addresses[i].address));\n    }\n\n    Promise.all(promises).then(res => resolve(res)).catch(e => reject(e));\n  });\n};\n_c = GetAddress;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetAddress\");","map":{"version":3,"sources":["/Users/clairelivingstone/Desktop/healthpass/client/src/Map/GetAddress.js"],"names":["Geocode","setApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","getGeoCodeFromAdd","add","Promise","resolve","reject","center","fromAddress","then","response","lat","lng","results","geometry","location","error","console","GetAddress","addresses","promises","i","length","push","address","all","res","catch","e"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,eAApB;AACAA,OAAO,CAACC,SAAR,CAAkBC,OAAO,CAACC,GAAR,CAAYC,6BAA9B;;AAGA,MAAMC,iBAAiB,GAAG,MAAOC,GAAP,IAAe;AACrC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAMC,MAAM,GAAG,EAAf;AACAV,IAAAA,OAAO,CAACW,WAAR,CAAoBL,GAApB,EAAyBM,IAAzB,CACKC,QAAD,IAAc;AACZ,YAAM;AAAEC,QAAAA,GAAF;AAAOC,QAAAA;AAAP,UAAeF,QAAQ,CAACG,OAAT,CAAiB,CAAjB,EAAoBC,QAApB,CAA6BC,QAAlD;AACAR,MAAAA,MAAM,CAACI,GAAP,GAAaA,GAAb;AACAJ,MAAAA,MAAM,CAACK,GAAP,GAAaA,GAAb;AACAP,MAAAA,OAAO,CAACE,MAAD,CAAP;AACD,KANL,EAOKS,KAAD,IAAW;AACTC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,KATL;AAWH,GAbM,CAAP;AAcH,CAfD;;AAiBA,OAAO,MAAME,UAAU,GAAG,MAAOC,SAAP,IAAqB;AAC3C,SAAO,IAAIf,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAoB;AACnC,QAAIc,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvCD,MAAAA,QAAQ,CAACG,IAAT,CAAcrB,iBAAiB,CAACiB,SAAS,CAACE,CAAD,CAAT,CAAaG,OAAd,CAA/B;AACH;;AACDpB,IAAAA,OAAO,CAACqB,GAAR,CAAYL,QAAZ,EAAsBX,IAAtB,CAA2BiB,GAAG,IAAErB,OAAO,CAACqB,GAAD,CAAvC,EAA8CC,KAA9C,CAAoDC,CAAC,IAAEtB,MAAM,CAACsB,CAAD,CAA7D;AACH,GANM,CAAP;AAOH,CARM;KAAMV,U","sourcesContent":["import Geocode from \"react-geocode\";\nGeocode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);\n\n\nconst getGeoCodeFromAdd = async (add) => {\n    return new Promise((resolve, reject) => {\n        const center = {};\n        Geocode.fromAddress(add).then(\n            (response) => {\n              const { lat, lng } = response.results[0].geometry.location;\n              center.lat = lat;\n              center.lng = lng;\n              resolve(center);\n            },\n            (error) => {\n              console.error(error);\n            }\n        )\n    })\n}\n\nexport const GetAddress = async (addresses) => {\n    return new Promise((resolve,reject) => {\n        let promises = [];\n        for (let i = 0; i < addresses.length; i++) {\n            promises.push(getGeoCodeFromAdd(addresses[i].address));\n        }\n        Promise.all(promises).then(res=>resolve(res)).catch(e=>reject(e));\n    })\n}\n    \n"]},"metadata":{},"sourceType":"module"}