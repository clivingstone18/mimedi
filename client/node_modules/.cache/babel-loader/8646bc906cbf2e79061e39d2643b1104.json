{"ast":null,"code":"import moment from \"moment\";\nexport const getTodaysEvents = info => {\n  let events = [];\n\n  for (let i = 0; i < info.length; i++) {\n    if (moment().diff(new Date(info[i].start)) < 0 && moment().diff(new Date(info[i].start)) > -129600000) {\n      console.log(moment().diff(new Date(info[i].start)));\n      events.push(info[i]);\n    }\n  }\n\n  return events;\n};\n/* gets the number of app u have had of a given */\n\nexport const getCompletedApps = info => {\n  let numApps = 0;\n\n  for (let i = 0; i < info.length; i++) {\n    if (moment().diff(new Date(info[i].start)) > 0) {\n      numApps++;\n    }\n  }\n\n  return numApps;\n};\nexport const getAllAppCounts = () => {\n  /* */\n};\nexport const addNewEvent = (summary, location, start, end) => {\n  var event = {\n    summary: \"MiMedi: \" + summary,\n    location: location,\n    start: start,\n    end: end\n  };\n  return event;\n};\nexport const addCalendarEvent = async info => {\n  return new Promise((resolve, reject) => {\n    let startRaw = new Date(info.date);\n    let endRaw = new Date(info.date);\n    endRaw.setMinutes(startRaw.getMinutes() + 30);\n    let start = {\n      dateTime: new Date(info.date).toISOString().toString(),\n      timeZone: \"Australia/Sydney\"\n    };\n    let end = {\n      dateTime: endRaw.toISOString().toString(),\n      timeZone: \"Australia/Sydney\"\n    };\n    var gapi = window.gapi;\n    var CLIENT_ID = \"249886028801-4635vef8o4vjcgj539du52m6go3u3vnk.apps.googleusercontent.com\";\n    var API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\n    var DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n    var SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\n    gapi.load(\"client:auth2\", () => {\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES\n      });\n      gapi.client.load(\"calendar\", \"v3\", () => {\n        let instance = gapi.auth2.getAuthInstance().then(() => {\n          var event = addNewEvent(info.summary, info.location, start, end);\n          var request = gapi.client.calendar.events.insert({\n            calendarId: \"primary\",\n            resource: event\n          });\n          request.execute(event => {\n            window.open(event.htmlLink);\n            resolve(\"DONE\");\n          });\n        });\n      });\n    });\n  });\n};\nexport const addEvent = async event => {\n  return new Promise((resolve, reject) => {\n    var gapi = window.gapi;\n    var CLIENT_ID = \"249886028801-4635vef8o4vjcgj539du52m6go3u3vnk.apps.googleusercontent.com\";\n    var API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\n    var DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n    var SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\n    gapi.load(\"client:auth2\", () => {\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES\n      });\n      gapi.client.load(\"calendar\", \"v3\", () => {\n        let instance = gapi.auth2.getAuthInstance().then(() => {\n          var request = gapi.client.calendar.events.insert({\n            calendarId: \"primary\",\n            resource: event\n          });\n          request.execute(event => {\n            resolve(\"DONE\");\n          });\n        });\n      });\n    });\n  });\n};","map":{"version":3,"sources":["/Users/clairelivingstone/Desktop/healthpass/client/src/Calendar/Calendar.js"],"names":["moment","getTodaysEvents","info","events","i","length","diff","Date","start","console","log","push","getCompletedApps","numApps","getAllAppCounts","addNewEvent","summary","location","end","event","addCalendarEvent","Promise","resolve","reject","startRaw","date","endRaw","setMinutes","getMinutes","dateTime","toISOString","toString","timeZone","gapi","window","CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","load","client","init","apiKey","clientId","discoveryDocs","scope","instance","auth2","getAuthInstance","then","request","calendar","insert","calendarId","resource","execute","open","htmlLink","addEvent"],"mappings":"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","sourcesContent":["import moment from \"moment\"\n\nexport const getTodaysEvents = (info) => {\n  let events = [];\n  for (let i = 0; i < info.length; i++) {\n    if (\n      moment().diff(new Date(info[i].start)) < 0 &&\n      moment().diff(new Date(info[i].start)) > -129600000\n    ) {\n      console.log(moment().diff(new Date(info[i].start)));\n      events.push(info[i]);\n    }\n  }\n  return events;\n};\n\n/* gets the number of app u have had of a given */ \n\nexport const getCompletedApps = (info) => {\n  let numApps = 0;\n  for (let i = 0; i < info.length; i++) {\n    if (moment().diff(new Date(info[i].start)) > 0) {\n      numApps++;\n    }\n  }\n  return numApps;\n};\n\nexport const getAllAppCounts = () => {\n  /* */ \n\n\n}\n\n\n\nexport const addNewEvent = (summary, location, start, end) => {\n  var event = {\n    summary: \"MiMedi: \" + summary,\n    location: location,\n    start: start,\n    end: end,\n  };\n  return event;\n};\n\nexport const addCalendarEvent = async (info) => {\n  return new Promise((resolve, reject) => {\n    let startRaw = new Date(info.date);\n    let endRaw = new Date(info.date);\n    endRaw.setMinutes(startRaw.getMinutes() + 30);\n\n    let start = {\n      dateTime: new Date(info.date).toISOString().toString(),\n      timeZone: \"Australia/Sydney\",\n    };\n\n    let end = {\n      dateTime: endRaw.toISOString().toString(),\n      timeZone: \"Australia/Sydney\",\n    };\n\n    var gapi = window.gapi;\n    var CLIENT_ID =\n      \"249886028801-4635vef8o4vjcgj539du52m6go3u3vnk.apps.googleusercontent.com\";\n    var API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\n    var DISCOVERY_DOCS = [\n      \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\",\n    ];\n    var SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\n\n    gapi.load(\"client:auth2\", () => {\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES,\n      });\n\n      gapi.client.load(\"calendar\", \"v3\", () => {\n        let instance = gapi.auth2.getAuthInstance().then(() => {\n          var event = addNewEvent(info.summary, info.location, start, end);\n\n          var request = gapi.client.calendar.events.insert({\n            calendarId: \"primary\",\n            resource: event,\n          });\n\n          request.execute((event) => {\n            window.open(event.htmlLink);\n            resolve(\"DONE\")\n          });\n        });\n      });\n    });\n  });\n};\n\nexport const addEvent = async (event) => {\n  return new Promise((resolve, reject) => {\n\n    var gapi = window.gapi;\n    var CLIENT_ID =\n      \"249886028801-4635vef8o4vjcgj539du52m6go3u3vnk.apps.googleusercontent.com\";\n    var API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\n    var DISCOVERY_DOCS = [\n      \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\",\n    ];\n    var SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\n\n    gapi.load(\"client:auth2\", () => {\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES,\n      });\n\n      gapi.client.load(\"calendar\", \"v3\", () => {\n          let instance = gapi.auth2.getAuthInstance().then(() => {      \n              var request = gapi.client.calendar.events.insert({\n                calendarId: \"primary\",\n                resource: event,\n              });\n    \n              request.execute((event) => {\n                resolve(\"DONE\")\n              });\n            });\n      });\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"module"}