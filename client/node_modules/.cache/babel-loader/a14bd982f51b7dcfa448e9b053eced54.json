{"ast":null,"code":"var _jsxFileName = \"/Users/clairelivingstone/Desktop/healthpass/client/src/Calendar/CalendarPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport BigCalendar, { Views } from \"react-big-calendar\";\nimport { useHistory } from \"react-router-dom\";\nimport moment from \"moment\";\nimport Toolbar from \"./ToolBar\";\nimport styled from 'styled-components';\nimport { getAllApps } from \"./Calendar\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport { getTodaysEvents, getCompletedApps, addNewEvent } from \"./Calendar\"; // Setup the localizer by providing the moment (or globalize) Object\n// to the correct localizer.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localizer = BigCalendar.momentLocalizer(moment); // or globalizeLocalizer\n\nconst API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\nconst Btn = styled.button`\npadding: 0.3rem;\noutline:none;\ncolor:#424B92;\nwidth: 150px;\nborder-radius: 50px;\nborder: none;\nfont-weight:bold;\nbackground:white;\n\n`;\n_c = Btn;\nexport const CalendarPage = () => {\n  _s();\n\n  const [events, setEvents] = useState([]);\n  const [gpCompleted, setGPCompleted] = useState(0);\n  const [opCompleted, setOpCompleted] = useState(0);\n  const [psychCompleted, setPsychCompleted] = useState(0);\n  const [dentCompleted, setDentCompleted] = useState(0);\n  const [gynoCompleted, setGynoCompleted] = useState(0);\n  const history = useHistory();\n  const [todaysEvents, setTodaysEvents] = useState([]);\n  var gapi = window.gapi;\n  var CLIENT_ID = \"249886028801-4635vef8o4vjcgj539du52m6go3u3vnk.apps.googleusercontent.com\";\n  var API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\n  var DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n  var SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\n  /* gets all upcoming events for today */\n\n  useEffect(() => {\n    gapi.load(\"client:auth2\", () => {\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES\n      });\n      gapi.client.load(\"calendar\", \"v3\", () => console.log(\"hello?\"));\n      let instance = gapi.auth2.getAuthInstance().signIn().then(() => {\n        let request = gapi.client.calendar.events.list({\n          calendarId: \"primary\",\n          showDeleted: false,\n          orderBy: \"updated\",\n          maxResults: 2000\n        });\n        request.execute(event => {\n          let res = event.items.filter(i => i.summary && i.summary.includes(\"MiMedi\"));\n          let psychApps = res.filter(i => i.summary && i.summary.includes(\"Psychologist\"));\n          psychApps = psychApps.map(elem => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Psych\"\n            };\n          });\n          let GPApps = res.filter(i => i.summary && i.summary.includes(\"GP\"));\n          GPApps = GPApps.map(elem => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Gp\"\n            };\n          });\n          let OpApps = res.filter(i => i.summary && i.summary.includes(\"Optometrist\"));\n          OpApps = OpApps.map(elem => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Op\"\n            };\n          });\n          let DentApps = res.filter(i => i.summary && i.summary.includes(\"Dentist\"));\n          DentApps = DentApps.map(elem => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Dent\"\n            };\n          });\n          let gynoApps = res.filter(i => i.summary && i.summary.includes(\"Gynaecologist\"));\n          gynoApps = gynoApps.map(elem => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Gyno\"\n            };\n          });\n          let meds = res.filter(i => i.summary && i.summary.includes(\"Dose of\"));\n          let medsEvents = [];\n          meds.map(elem => {\n            let numDays = elem.recurrence[0].split(\"COUNT=\")[1];\n            let currentDate = moment(new Date(elem.start.dateTime));\n            console.log(currentDate);\n\n            for (let i = 0; i < numDays; i++) {\n              medsEvents.push({\n                title: elem.summary,\n                start: currentDate._d,\n                end: currentDate._d,\n                allDay: true,\n                type: \"Med\"\n              });\n              currentDate = moment(currentDate).add(1, \"days\");\n            }\n          });\n          console.log(medsEvents);\n          setEvents([GPApps, gynoApps, DentApps, OpApps, psychApps, medsEvents].flat(Infinity));\n          setTodaysEvents(getTodaysEvents([medsEvents, gynoApps, GPApps, DentApps, OpApps, psychApps].flat(Infinity)));\n          setGPCompleted(getCompletedApps(GPApps));\n          setDentCompleted(getCompletedApps(DentApps));\n          setOpCompleted(getCompletedApps(OpApps));\n          setPsychCompleted(getCompletedApps(psychApps));\n          setGynoCompleted(getCompletedApps(gynoApps));\n        });\n      });\n    });\n  }, []);\n  let formats = {\n    dateFormat: \"DD\",\n    dayFormat: (date, culture, localizer) => localizer.format(date, \"DD\", culture),\n    dayRangeHeaderFormat: ({\n      start,\n      end\n    }, culture, localizer) => localizer.format(start, {\n      date: \"short\"\n    }, culture) + \" â€” \" + localizer.format(end, {\n      date: \"short\"\n    }, culture)\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"2rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: \"#8ED9D7\"\n      },\n      children: \"MiCal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"space-evenly\",\n          marginBottom: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Btn, {\n          style: {\n            border: \"none\",\n            color: \"white\",\n            background: \"#8ED9D7\"\n          },\n          onClick: () => history.push(\"/addNewMed\"),\n          children: [\" \", \"+ medication\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Btn, {\n          style: {\n            border: \"none\",\n            color: \"white\",\n            background: \"#8ED9D7\"\n          },\n          onClick: () => history.push(\"/addNewApp\"),\n          children: [\" \", \"+ appointment\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BigCalendar, {\n        popupOffset: 0,\n        localizer: localizer,\n        events: events,\n        components: {\n          toolbar: Toolbar\n        },\n        step: 60,\n        showMultiDayTimes: true,\n        style: {\n          height: 500\n        },\n        eventPropGetter: (event, start, end, isSelected) => {\n          let newStyle = {\n            backgroundColor: \"lightgrey\",\n            color: \"black\",\n            borderRadius: \"0px\",\n            border: \"none\"\n          };\n\n          if (event.type == \"Gp\") {\n            newStyle.backgroundColor = \"#295FA6\";\n          } else if (event.type == \"Psych\") {\n            newStyle.backgroundColor = \"#FCC8E1\";\n          } else if (event.type == \"Dent\") {\n            newStyle.backgroundColor = \"#C4C4C4\";\n          } else if (event.type == \"Op\") {\n            newStyle.backgroundColor = \"#B1FF81\";\n          } else if (event.type == \"Gyno\") {\n            newStyle.backgroundColor = \"#FF0000\";\n          }\n\n          return {\n            className: \"\",\n            style: newStyle\n          };\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CalendarPage, \"sbpvvAOqAJBFJNHasnUESQb3JnM=\", false, function () {\n  return [useHistory];\n});\n\n_c2 = CalendarPage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Btn\");\n$RefreshReg$(_c2, \"CalendarPage\");","map":{"version":3,"sources":["/Users/clairelivingstone/Desktop/healthpass/client/src/Calendar/CalendarPage.js"],"names":["React","useState","useEffect","BigCalendar","Views","useHistory","moment","Toolbar","styled","getAllApps","getTodaysEvents","getCompletedApps","addNewEvent","localizer","momentLocalizer","API_KEY","Btn","button","CalendarPage","events","setEvents","gpCompleted","setGPCompleted","opCompleted","setOpCompleted","psychCompleted","setPsychCompleted","dentCompleted","setDentCompleted","gynoCompleted","setGynoCompleted","history","todaysEvents","setTodaysEvents","gapi","window","CLIENT_ID","DISCOVERY_DOCS","SCOPES","load","client","init","apiKey","clientId","discoveryDocs","scope","console","log","instance","auth2","getAuthInstance","signIn","then","request","calendar","list","calendarId","showDeleted","orderBy","maxResults","execute","event","res","items","filter","i","summary","includes","psychApps","map","elem","title","start","Date","dateTime","end","allDay","type","GPApps","OpApps","DentApps","gynoApps","meds","medsEvents","numDays","recurrence","split","currentDate","push","_d","add","flat","Infinity","formats","dateFormat","dayFormat","date","culture","format","dayRangeHeaderFormat","padding","color","display","justifyContent","marginBottom","border","background","toolbar","height","isSelected","newStyle","backgroundColor","borderRadius","className","style"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport BigCalendar, { Views } from \"react-big-calendar\";\nimport { useHistory } from \"react-router-dom\";\nimport moment from \"moment\";\nimport Toolbar from \"./ToolBar\"\nimport styled from 'styled-components'\nimport {getAllApps} from \"./Calendar\"\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport {getTodaysEvents, getCompletedApps, addNewEvent} from \"./Calendar\"\n// Setup the localizer by providing the moment (or globalize) Object\n// to the correct localizer.\nconst localizer = BigCalendar.momentLocalizer(moment); // or globalizeLocalizer\n\nconst API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\n\nconst Btn = styled.button`\npadding: 0.3rem;\noutline:none;\ncolor:#424B92;\nwidth: 150px;\nborder-radius: 50px;\nborder: none;\nfont-weight:bold;\nbackground:white;\n\n`\n\n\nexport const CalendarPage = () => {\n  const [events, setEvents] = useState([]);\n  const [gpCompleted, setGPCompleted] = useState(0);\n  const [opCompleted, setOpCompleted] = useState(0);\n  const [psychCompleted, setPsychCompleted] = useState(0);\n  const [dentCompleted, setDentCompleted] = useState(0);\n  const [gynoCompleted, setGynoCompleted] = useState(0);\n\n  const history = useHistory();\n\n  const [todaysEvents, setTodaysEvents] = useState([]);\n\n\n\n  var gapi = window.gapi;\n  var CLIENT_ID =\n    \"249886028801-4635vef8o4vjcgj539du52m6go3u3vnk.apps.googleusercontent.com\";\n  var API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\n  var DISCOVERY_DOCS = [\n    \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\",\n  ];\n  var SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\n\n  /* gets all upcoming events for today */\n\n\n  useEffect(() => {\n    gapi.load(\"client:auth2\", () => {\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES,\n      });\n\n      gapi.client.load(\"calendar\", \"v3\", () => console.log(\"hello?\"));\n\n      let instance = gapi.auth2\n        .getAuthInstance()\n        .signIn()\n        .then(() => {\n          let request = gapi.client.calendar.events.list({\n            calendarId: \"primary\",\n            showDeleted: false,\n            orderBy: \"updated\",\n            maxResults: 2000,\n          });\n\n          request.execute((event) => {\n            let res = event.items.filter(\n              (i) => i.summary && i.summary.includes(\"MiMedi\")\n            );\n\n            let psychApps = res.filter(\n              (i) => i.summary && i.summary.includes(\"Psychologist\")\n            );\n            psychApps = psychApps.map((elem) => {\n              return {\n                title: elem.summary,\n                start: new Date(elem.start.dateTime),\n                end: new Date(elem.start.dateTime),\n                allDay: false,\n                type: \"Psych\",\n              };\n            });\n            let GPApps = res.filter(\n              (i) => i.summary && i.summary.includes(\"GP\")\n            );\n            GPApps = GPApps.map((elem) => {\n              return {\n                title: elem.summary,\n                start: new Date(elem.start.dateTime),\n                end: new Date(elem.start.dateTime),\n                allDay: false,\n                type: \"Gp\",\n              };\n            });\n            let OpApps = res.filter(\n              (i) => i.summary && i.summary.includes(\"Optometrist\")\n            );\n\n            OpApps = OpApps.map((elem) => {\n              return {\n                title: elem.summary,\n                start: new Date(elem.start.dateTime),\n                end: new Date(elem.start.dateTime),\n                allDay: false,\n                type: \"Op\",\n              };\n            });\n\n            let DentApps = res.filter(\n              (i) => i.summary && i.summary.includes(\"Dentist\")\n            );\n\n            DentApps = DentApps.map((elem) => {\n              return {\n                title: elem.summary,\n                start: new Date(elem.start.dateTime),\n                end: new Date(elem.start.dateTime),\n                allDay: false,\n                type: \"Dent\",\n              };\n            });\n\n            let gynoApps = res.filter(\n              (i) => i.summary && i.summary.includes(\"Gynaecologist\")\n            );\n\n            gynoApps = gynoApps.map((elem) => {\n              return {\n                title: elem.summary,\n                start: new Date(elem.start.dateTime),\n                end: new Date(elem.start.dateTime),\n                allDay: false,\n                type: \"Gyno\",\n              };\n            });\n\n\n\n\n            let meds = res.filter(\n              (i) => i.summary && i.summary.includes(\"Dose of\")\n            );\n            let medsEvents = [];\n\n            meds.map((elem) => {\n              let numDays = elem.recurrence[0].split(\"COUNT=\")[1];\n              let currentDate = moment(new Date(elem.start.dateTime));\n              console.log(currentDate);\n              for (let i = 0; i < numDays; i++) {\n                medsEvents.push({\n                  title: elem.summary,\n                  start: currentDate._d,\n                  end: currentDate._d,\n                  allDay: true,\n                  type: \"Med\",\n                });\n                currentDate = moment(currentDate).add(1, \"days\");\n              }\n            });\n\n            console.log(medsEvents);\n\n            setEvents(\n              [GPApps, gynoApps, DentApps, OpApps, psychApps, medsEvents].flat(Infinity)\n            );\n            setTodaysEvents(\n              getTodaysEvents(\n                [medsEvents, gynoApps, GPApps, DentApps, OpApps, psychApps].flat(Infinity)\n              )\n            );\n\n            setGPCompleted(getCompletedApps(GPApps));\n            setDentCompleted(getCompletedApps(DentApps));\n            setOpCompleted(getCompletedApps(OpApps));\n            setPsychCompleted(getCompletedApps(psychApps));\n            setGynoCompleted(getCompletedApps(gynoApps))\n          });\n        });\n    });\n  }, []);\n\n\n  let formats = {\n    dateFormat: \"DD\",\n\n    dayFormat: (date, culture, localizer) =>\n      localizer.format(date, \"DD\", culture),\n\n    dayRangeHeaderFormat: ({ start, end }, culture, localizer) =>\n      localizer.format(start, { date: \"short\" }, culture) +\n      \" â€” \" +\n      localizer.format(end, { date: \"short\" }, culture),\n  };\n\n  return (\n    <div style={{ padding: \"2rem\" }}>\n      <h1 style={{ color: \"#8ED9D7\" }}>MiCal</h1>\n      <div>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-evenly\",\n            marginBottom: \"10px\",\n          }}\n        >\n          <Btn\n            style={{ border: \"none\", color: \"white\", background: \"#8ED9D7\" }}\n            onClick={() => history.push(\"/addNewMed\")}\n          >\n            {\" \"}\n            + medication{\" \"}\n          </Btn>\n\n          <br></br>\n\n          <Btn\n            style={{ border: \"none\", color: \"white\", background: \"#8ED9D7\" }}\n            onClick={() => history.push(\"/addNewApp\")}\n          >\n            {\" \"}\n            + appointment{\" \"}\n          </Btn>\n        </div>\n\n        <BigCalendar\n          popupOffset={0}\n          localizer={localizer}\n          events={events}\n          components={{\n            toolbar:Toolbar\n          }}\n          step={60}\n          showMultiDayTimes\n          style={{ height: 500 }}\n          eventPropGetter={(event, start, end, isSelected) => {\n            let newStyle = {\n              backgroundColor: \"lightgrey\",\n              color: \"black\",\n              borderRadius: \"0px\",\n              border: \"none\",\n            };\n\n            if (event.type == \"Gp\") {\n              newStyle.backgroundColor = \"#295FA6\";\n            } else if (event.type == \"Psych\") {\n              newStyle.backgroundColor = \"#FCC8E1\";\n            } else if (event.type == \"Dent\") {\n              newStyle.backgroundColor = \"#C4C4C4\";\n            } else if (event.type == \"Op\") {\n              newStyle.backgroundColor = \"#B1FF81\";\n            }\n            else if (event.type == \"Gyno\") {\n              newStyle.backgroundColor = \"#FF0000\";\n            }\n\n            return {\n              className: \"\",\n              style: newStyle,\n            };\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}