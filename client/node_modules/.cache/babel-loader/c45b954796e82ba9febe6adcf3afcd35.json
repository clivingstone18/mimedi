{"ast":null,"code":"import moment from \"moment\";\nexport const getTodaysEvents = info => {\n  let events = [];\n\n  for (let i = 0; i < info.length; i++) {\n    if (moment().diff(new Date(info[i].start)) < 0 && moment().diff(new Date(info[i].start)) > -129600000) {\n      console.log(moment().diff(new Date(info[i].start)));\n      events.push(info[i]);\n    }\n  }\n\n  return events;\n};\n/* gets the number of app u have had of a given */\n\nexport const getCompletedApps = info => {\n  let numApps = 0;\n\n  for (let i = 0; i < info.length; i++) {\n    if (moment().diff(new Date(info[i].start)) > 0) {\n      numApps++;\n    }\n  }\n\n  return numApps;\n};\nvar gapi = window.gapi;\nvar CLIENT_ID = \"249886028801-4635vef8o4vjcgj539du52m6go3u3vnk.apps.googleusercontent.com\";\nvar API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\nvar DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\nvar SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\nexport const getAllApps = () => {\n  return new Promise((resolve, reject) => {\n    gapi.load(\"client:auth2\", () => {\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES\n      });\n      gapi.client.load(\"calendar\", \"v3\", () => console.log(\"hello?\"));\n      let instance = gapi.auth2.getAuthInstance().signIn().then(() => {\n        let request = gapi.client.calendar.events.list({\n          calendarId: \"primary\",\n          showDeleted: false,\n          orderBy: \"updated\",\n          maxResults: 2000\n        });\n        request.execute(event => {\n          let res = event.items.filter(i => i.summary && i.summary.includes(\"MiMedi\"));\n          let psychApps = res.filter(i => i.summary && i.summary.includes(\"Psychologist\"));\n          psychApps = psychApps.map(elem => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Psych\"\n            };\n          });\n          let GPApps = res.filter(i => i.summary && i.summary.includes(\"GP\"));\n          GPApps = GPApps.map(elem => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Gp\"\n            };\n          });\n          let OpApps = res.filter(i => i.summary && i.summary.includes(\"Optometrist\"));\n          OpApps = OpApps.map(elem => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Op\"\n            };\n          });\n          let DentApps = res.filter(i => i.summary && i.summary.includes(\"Dentist\"));\n          DentApps = DentApps.map(elem => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Dent\"\n            };\n          });\n          let gynoApps = res.filter(i => i.summary && i.summary.includes(\"Gynaecologist\"));\n          gynoApps = gynoApps.map(elem => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Gyno\"\n            };\n          });\n          let meds = res.filter(i => i.summary && i.summary.includes(\"Dose of\"));\n          let medsEvents = [];\n          meds.map(elem => {\n            let numDays = elem.recurrence[0].split(\"COUNT=\")[1];\n            let currentDate = moment(new Date(elem.start.dateTime));\n            console.log(currentDate);\n\n            for (let i = 0; i < numDays; i++) {\n              medsEvents.push({\n                title: elem.summary,\n                start: currentDate._d,\n                end: currentDate._d,\n                allDay: true,\n                type: \"Med\"\n              });\n              currentDate = moment(currentDate).add(1, \"days\");\n            }\n          });\n          resolve({\n            numGP: getCompletedApps(GPApps),\n            numDent: getCompletedApps(DentApps),\n            numOp: getCompletedApps(OpApps),\n            numPsych: getCompletedApps(psychApps),\n            numGyno: getCompletedApps(gynoApps)\n          });\n        });\n      });\n    });\n  });\n};\nexport const addNewEvent = (summary, location, start, end) => {\n  var event = {\n    summary: \"MiMedi: \" + summary,\n    location: location,\n    start: start,\n    end: end\n  };\n  return event;\n};\nexport const addCalendarEvent = async info => {\n  return new Promise((resolve, reject) => {\n    let startRaw = new Date(info.date);\n    let endRaw = new Date(info.date);\n    endRaw.setMinutes(startRaw.getMinutes() + 30);\n    let start = {\n      dateTime: new Date(info.date).toISOString().toString(),\n      timeZone: \"Australia/Sydney\"\n    };\n    let end = {\n      dateTime: endRaw.toISOString().toString(),\n      timeZone: \"Australia/Sydney\"\n    };\n    var gapi = window.gapi;\n    var CLIENT_ID = \"249886028801-4635vef8o4vjcgj539du52m6go3u3vnk.apps.googleusercontent.com\";\n    var API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\n    var DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n    var SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\n    gapi.load(\"client:auth2\", () => {\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES\n      });\n      gapi.client.load(\"calendar\", \"v3\", () => {\n        let instance = gapi.auth2.getAuthInstance().then(() => {\n          var event = addNewEvent(info.summary, info.location, start, end);\n          var request = gapi.client.calendar.events.insert({\n            calendarId: \"primary\",\n            resource: event\n          });\n          request.execute(event => {\n            window.open(event.htmlLink);\n            resolve(\"DONE\");\n          });\n        });\n      });\n    });\n  });\n};\nexport const addEvent = async event => {\n  return new Promise((resolve, reject) => {\n    var gapi = window.gapi;\n    var CLIENT_ID = \"249886028801-4635vef8o4vjcgj539du52m6go3u3vnk.apps.googleusercontent.com\";\n    var API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\n    var DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n    var SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\n    gapi.load(\"client:auth2\", () => {\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES\n      });\n      gapi.client.load(\"calendar\", \"v3\", () => {\n        let instance = gapi.auth2.getAuthInstance().then(() => {\n          var request = gapi.client.calendar.events.insert({\n            calendarId: \"primary\",\n            resource: event\n          });\n          request.execute(event => {\n            resolve(\"DONE\");\n          });\n        });\n      });\n    });\n  });\n};","map":{"version":3,"sources":["/Users/clairelivingstone/Desktop/healthpass/client/src/Calendar/Calendar.js"],"names":["moment","getTodaysEvents","info","events","i","length","diff","Date","start","console","log","push","getCompletedApps","numApps","gapi","window","CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","getAllApps","Promise","resolve","reject","load","client","init","apiKey","clientId","discoveryDocs","scope","instance","auth2","getAuthInstance","signIn","then","request","calendar","list","calendarId","showDeleted","orderBy","maxResults","execute","event","res","items","filter","summary","includes","psychApps","map","elem","title","dateTime","end","allDay","type","GPApps","OpApps","DentApps","gynoApps","meds","medsEvents","numDays","recurrence","split","currentDate","_d","add","numGP","numDent","numOp","numPsych","numGyno","addNewEvent","location","addCalendarEvent","startRaw","date","endRaw","setMinutes","getMinutes","toISOString","toString","timeZone","insert","resource","open","htmlLink","addEvent"],"mappings":"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","sourcesContent":["import moment from \"moment\";\n\nexport const getTodaysEvents = (info) => {\n  let events = [];\n  for (let i = 0; i < info.length; i++) {\n    if (\n      moment().diff(new Date(info[i].start)) < 0 &&\n      moment().diff(new Date(info[i].start)) > -129600000\n    ) {\n      console.log(moment().diff(new Date(info[i].start)));\n      events.push(info[i]);\n    }\n  }\n  return events;\n};\n\n/* gets the number of app u have had of a given */\n\nexport const getCompletedApps = (info) => {\n  let numApps = 0;\n  for (let i = 0; i < info.length; i++) {\n    if (moment().diff(new Date(info[i].start)) > 0) {\n      numApps++;\n    }\n  }\n  return numApps;\n};\n\nvar gapi = window.gapi;\nvar CLIENT_ID =\n  \"249886028801-4635vef8o4vjcgj539du52m6go3u3vnk.apps.googleusercontent.com\";\nvar API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\nvar DISCOVERY_DOCS = [\n  \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\",\n];\nvar SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\n\nexport const getAllApps = () => {\n  return new Promise((resolve, reject) => {\n\n  gapi.load(\"client:auth2\", () => {\n    gapi.client.init({\n      apiKey: API_KEY,\n      clientId: CLIENT_ID,\n      discoveryDocs: DISCOVERY_DOCS,\n      scope: SCOPES,\n    });\n\n    gapi.client.load(\"calendar\", \"v3\", () => console.log(\"hello?\"));\n\n    let instance = gapi.auth2\n      .getAuthInstance()\n      .signIn()\n      .then(() => {\n        let request = gapi.client.calendar.events.list({\n          calendarId: \"primary\",\n          showDeleted: false,\n          orderBy: \"updated\",\n          maxResults: 2000,\n        });\n\n        request.execute((event) => {\n          let res = event.items.filter(\n            (i) => i.summary && i.summary.includes(\"MiMedi\")\n          );\n\n          let psychApps = res.filter(\n            (i) => i.summary && i.summary.includes(\"Psychologist\")\n          );\n          psychApps = psychApps.map((elem) => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Psych\",\n            };\n          });\n          let GPApps = res.filter((i) => i.summary && i.summary.includes(\"GP\"));\n          GPApps = GPApps.map((elem) => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Gp\",\n            };\n          });\n          let OpApps = res.filter(\n            (i) => i.summary && i.summary.includes(\"Optometrist\")\n          );\n\n          OpApps = OpApps.map((elem) => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Op\",\n            };\n          });\n\n          let DentApps = res.filter(\n            (i) => i.summary && i.summary.includes(\"Dentist\")\n          );\n\n          DentApps = DentApps.map((elem) => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Dent\",\n            };\n          });\n\n          let gynoApps = res.filter(\n            (i) => i.summary && i.summary.includes(\"Gynaecologist\")\n          );\n\n          gynoApps = gynoApps.map((elem) => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Gyno\",\n            };\n          });\n\n          let meds = res.filter(\n            (i) => i.summary && i.summary.includes(\"Dose of\")\n          );\n          let medsEvents = [];\n\n          meds.map((elem) => {\n            let numDays = elem.recurrence[0].split(\"COUNT=\")[1];\n            let currentDate = moment(new Date(elem.start.dateTime));\n            console.log(currentDate);\n            for (let i = 0; i < numDays; i++) {\n              medsEvents.push({\n                title: elem.summary,\n                start: currentDate._d,\n                end: currentDate._d,\n                allDay: true,\n                type: \"Med\",\n              });\n              currentDate = moment(currentDate).add(1, \"days\");\n            }\n          });\n\n          resolve({\n            numGP: getCompletedApps(GPApps),\n            numDent: getCompletedApps(DentApps),\n            numOp: getCompletedApps(OpApps),\n            numPsych: getCompletedApps(psychApps),\n            numGyno: getCompletedApps(gynoApps),\n          })\n        })\n      })\n    })\n  })\n}\n\nexport const addNewEvent = (summary, location, start, end) => {\n  var event = {\n    summary: \"MiMedi: \" + summary,\n    location: location,\n    start: start,\n    end: end,\n  };\n  return event;\n};\n\nexport const addCalendarEvent = async (info) => {\n  return new Promise((resolve, reject) => {\n    let startRaw = new Date(info.date);\n    let endRaw = new Date(info.date);\n    endRaw.setMinutes(startRaw.getMinutes() + 30);\n\n    let start = {\n      dateTime: new Date(info.date).toISOString().toString(),\n      timeZone: \"Australia/Sydney\",\n    };\n\n    let end = {\n      dateTime: endRaw.toISOString().toString(),\n      timeZone: \"Australia/Sydney\",\n    };\n\n    var gapi = window.gapi;\n    var CLIENT_ID =\n      \"249886028801-4635vef8o4vjcgj539du52m6go3u3vnk.apps.googleusercontent.com\";\n    var API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\n    var DISCOVERY_DOCS = [\n      \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\",\n    ];\n    var SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\n\n    gapi.load(\"client:auth2\", () => {\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES,\n      });\n\n      gapi.client.load(\"calendar\", \"v3\", () => {\n        let instance = gapi.auth2.getAuthInstance().then(() => {\n          var event = addNewEvent(info.summary, info.location, start, end);\n\n          var request = gapi.client.calendar.events.insert({\n            calendarId: \"primary\",\n            resource: event,\n          });\n\n          request.execute((event) => {\n            window.open(event.htmlLink);\n            resolve(\"DONE\");\n          });\n        });\n      });\n    });\n  });\n};\n\nexport const addEvent = async (event) => {\n  return new Promise((resolve, reject) => {\n    var gapi = window.gapi;\n    var CLIENT_ID =\n      \"249886028801-4635vef8o4vjcgj539du52m6go3u3vnk.apps.googleusercontent.com\";\n    var API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\n    var DISCOVERY_DOCS = [\n      \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\",\n    ];\n    var SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\n\n    gapi.load(\"client:auth2\", () => {\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES,\n      });\n\n      gapi.client.load(\"calendar\", \"v3\", () => {\n        let instance = gapi.auth2.getAuthInstance().then(() => {\n          var request = gapi.client.calendar.events.insert({\n            calendarId: \"primary\",\n            resource: event,\n          });\n\n          request.execute((event) => {\n            resolve(\"DONE\");\n          });\n        });\n      });\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"module"}