{"ast":null,"code":"import moment from \"moment\";\nexport const getTodaysEvents = info => {\n  let events = [];\n\n  for (let i = 0; i < info.length; i++) {\n    if (moment().diff(new Date(info[i].start)) < 0 && moment().diff(new Date(info[i].start)) > -129600000) {\n      console.log(moment().diff(new Date(info[i].start)));\n      events.push(info[i]);\n    }\n  }\n\n  return events;\n};\n/* gets the number of app u have had of a given */\n\nexport const getCompletedApps = info => {\n  let numApps = 0;\n\n  for (let i = 0; i < info.length; i++) {\n    if (moment().diff(new Date(info[i].start)) > 0) {\n      numApps++;\n    }\n  }\n\n  return numApps;\n};\nvar gapi = window.gapi;\nvar CLIENT_ID = \"249886028801-4635vef8o4vjcgj539du52m6go3u3vnk.apps.googleusercontent.com\";\nvar API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\nvar DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\nvar SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\nexport const getAllApps = () => {\n  gapi.load(\"client:auth2\", () => {\n    gapi.client.init({\n      apiKey: API_KEY,\n      clientId: CLIENT_ID,\n      discoveryDocs: DISCOVERY_DOCS,\n      scope: SCOPES\n    });\n    gapi.client.load(\"calendar\", \"v3\", () => console.log(\"hello?\"));\n    let instance = gapi.auth2.getAuthInstance().signIn().then(() => {\n      let request = gapi.client.calendar.events.list({\n        calendarId: \"primary\",\n        showDeleted: false,\n        orderBy: \"updated\",\n        maxResults: 2000\n      });\n      request.execute(event => {\n        let res = event.items.filter(i => i.summary && i.summary.includes(\"MiMedi\"));\n        let psychApps = res.filter(i => i.summary && i.summary.includes(\"Psychologist\"));\n        psychApps = psychApps.map(elem => {\n          return {\n            title: elem.summary,\n            start: new Date(elem.start.dateTime),\n            end: new Date(elem.start.dateTime),\n            allDay: false,\n            type: \"Psych\"\n          };\n        });\n        let GPApps = res.filter(i => i.summary && i.summary.includes(\"GP\"));\n        GPApps = GPApps.map(elem => {\n          return {\n            title: elem.summary,\n            start: new Date(elem.start.dateTime),\n            end: new Date(elem.start.dateTime),\n            allDay: false,\n            type: \"Gp\"\n          };\n        });\n        let OpApps = res.filter(i => i.summary && i.summary.includes(\"Optometrist\"));\n        OpApps = OpApps.map(elem => {\n          return {\n            title: elem.summary,\n            start: new Date(elem.start.dateTime),\n            end: new Date(elem.start.dateTime),\n            allDay: false,\n            type: \"Op\"\n          };\n        });\n        let DentApps = res.filter(i => i.summary && i.summary.includes(\"Dentist\"));\n        DentApps = DentApps.map(elem => {\n          return {\n            title: elem.summary,\n            start: new Date(elem.start.dateTime),\n            end: new Date(elem.start.dateTime),\n            allDay: false,\n            type: \"Dent\"\n          };\n        });\n        let gynoApps = res.filter(i => i.summary && i.summary.includes(\"Gynaecologist\"));\n        gynoApps = gynoApps.map(elem => {\n          return {\n            title: elem.summary,\n            start: new Date(elem.start.dateTime),\n            end: new Date(elem.start.dateTime),\n            allDay: false,\n            type: \"Gyno\"\n          };\n        });\n        let meds = res.filter(i => i.summary && i.summary.includes(\"Dose of\"));\n        let medsEvents = [];\n        meds.map(elem => {\n          let numDays = elem.recurrence[0].split(\"COUNT=\")[1];\n          let currentDate = moment(new Date(elem.start.dateTime));\n          console.log(currentDate);\n\n          for (let i = 0; i < numDays; i++) {\n            medsEvents.push({\n              title: elem.summary,\n              start: currentDate._d,\n              end: currentDate._d,\n              allDay: true,\n              type: \"Med\"\n            });\n            currentDate = moment(currentDate).add(1, \"days\");\n          }\n        });\n        return {\n          numGP: getCompletedApps(GPApps),\n          numDent: getCompletedApps(DentApps),\n          numOp: getCompletedApps(OpApps),\n          numPsych: getCompletedApps(psychApps),\n          numGyno: getCompletedApps(gynoApps)\n        };\n      });\n    });\n  });\n};\nexport const addNewEvent = (summary, location, start, end) => {\n  var event = {\n    summary: \"MiMedi: \" + summary,\n    location: location,\n    start: start,\n    end: end\n  };\n  return event;\n};\nexport const addCalendarEvent = async info => {\n  return new Promise((resolve, reject) => {\n    let startRaw = new Date(info.date);\n    let endRaw = new Date(info.date);\n    endRaw.setMinutes(startRaw.getMinutes() + 30);\n    let start = {\n      dateTime: new Date(info.date).toISOString().toString(),\n      timeZone: \"Australia/Sydney\"\n    };\n    let end = {\n      dateTime: endRaw.toISOString().toString(),\n      timeZone: \"Australia/Sydney\"\n    };\n    var gapi = window.gapi;\n    var CLIENT_ID = \"249886028801-4635vef8o4vjcgj539du52m6go3u3vnk.apps.googleusercontent.com\";\n    var API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\n    var DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n    var SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\n    gapi.load(\"client:auth2\", () => {\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES\n      });\n      gapi.client.load(\"calendar\", \"v3\", () => {\n        let instance = gapi.auth2.getAuthInstance().then(() => {\n          var event = addNewEvent(info.summary, info.location, start, end);\n          var request = gapi.client.calendar.events.insert({\n            calendarId: \"primary\",\n            resource: event\n          });\n          request.execute(event => {\n            window.open(event.htmlLink);\n            resolve(\"DONE\");\n          });\n        });\n      });\n    });\n  });\n};\nexport const addEvent = async event => {\n  return new Promise((resolve, reject) => {\n    var gapi = window.gapi;\n    var CLIENT_ID = \"249886028801-4635vef8o4vjcgj539du52m6go3u3vnk.apps.googleusercontent.com\";\n    var API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\n    var DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n    var SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\n    gapi.load(\"client:auth2\", () => {\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES\n      });\n      gapi.client.load(\"calendar\", \"v3\", () => {\n        let instance = gapi.auth2.getAuthInstance().then(() => {\n          var request = gapi.client.calendar.events.insert({\n            calendarId: \"primary\",\n            resource: event\n          });\n          request.execute(event => {\n            resolve(\"DONE\");\n          });\n        });\n      });\n    });\n  });\n};","map":{"version":3,"sources":["/Users/clairelivingstone/Desktop/healthpass/client/src/Calendar/Calendar.js"],"names":["moment","getTodaysEvents","info","events","i","length","diff","Date","start","console","log","push","getCompletedApps","numApps","gapi","window","CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","getAllApps","load","client","init","apiKey","clientId","discoveryDocs","scope","instance","auth2","getAuthInstance","signIn","then","request","calendar","list","calendarId","showDeleted","orderBy","maxResults","execute","event","res","items","filter","summary","includes","psychApps","map","elem","title","dateTime","end","allDay","type","GPApps","OpApps","DentApps","gynoApps","meds","medsEvents","numDays","recurrence","split","currentDate","_d","add","numGP","numDent","numOp","numPsych","numGyno","addNewEvent","location","addCalendarEvent","Promise","resolve","reject","startRaw","date","endRaw","setMinutes","getMinutes","toISOString","toString","timeZone","insert","resource","open","htmlLink","addEvent"],"mappings":"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","sourcesContent":["import moment from \"moment\";\n\nexport const getTodaysEvents = (info) => {\n  let events = [];\n  for (let i = 0; i < info.length; i++) {\n    if (\n      moment().diff(new Date(info[i].start)) < 0 &&\n      moment().diff(new Date(info[i].start)) > -129600000\n    ) {\n      console.log(moment().diff(new Date(info[i].start)));\n      events.push(info[i]);\n    }\n  }\n  return events;\n};\n\n/* gets the number of app u have had of a given */\n\nexport const getCompletedApps = (info) => {\n  let numApps = 0;\n  for (let i = 0; i < info.length; i++) {\n    if (moment().diff(new Date(info[i].start)) > 0) {\n      numApps++;\n    }\n  }\n  return numApps;\n};\n\nvar gapi = window.gapi;\nvar CLIENT_ID =\n  \"249886028801-4635vef8o4vjcgj539du52m6go3u3vnk.apps.googleusercontent.com\";\nvar API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\nvar DISCOVERY_DOCS = [\n  \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\",\n];\nvar SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\n\nexport const getAllApps = () => {\n  gapi.load(\"client:auth2\", () => {\n    gapi.client.init({\n      apiKey: API_KEY,\n      clientId: CLIENT_ID,\n      discoveryDocs: DISCOVERY_DOCS,\n      scope: SCOPES,\n    });\n\n    gapi.client.load(\"calendar\", \"v3\", () => console.log(\"hello?\"));\n\n    let instance = gapi.auth2\n      .getAuthInstance()\n      .signIn()\n      .then(() => {\n        let request = gapi.client.calendar.events.list({\n          calendarId: \"primary\",\n          showDeleted: false,\n          orderBy: \"updated\",\n          maxResults: 2000,\n        });\n\n        request.execute((event) => {\n          let res = event.items.filter(\n            (i) => i.summary && i.summary.includes(\"MiMedi\")\n          );\n\n          let psychApps = res.filter(\n            (i) => i.summary && i.summary.includes(\"Psychologist\")\n          );\n          psychApps = psychApps.map((elem) => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Psych\",\n            };\n          });\n          let GPApps = res.filter((i) => i.summary && i.summary.includes(\"GP\"));\n          GPApps = GPApps.map((elem) => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Gp\",\n            };\n          });\n          let OpApps = res.filter(\n            (i) => i.summary && i.summary.includes(\"Optometrist\")\n          );\n\n          OpApps = OpApps.map((elem) => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Op\",\n            };\n          });\n\n          let DentApps = res.filter(\n            (i) => i.summary && i.summary.includes(\"Dentist\")\n          );\n\n          DentApps = DentApps.map((elem) => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Dent\",\n            };\n          });\n\n          let gynoApps = res.filter(\n            (i) => i.summary && i.summary.includes(\"Gynaecologist\")\n          );\n\n          gynoApps = gynoApps.map((elem) => {\n            return {\n              title: elem.summary,\n              start: new Date(elem.start.dateTime),\n              end: new Date(elem.start.dateTime),\n              allDay: false,\n              type: \"Gyno\",\n            };\n          });\n\n          let meds = res.filter(\n            (i) => i.summary && i.summary.includes(\"Dose of\")\n          );\n          let medsEvents = [];\n\n          meds.map((elem) => {\n            let numDays = elem.recurrence[0].split(\"COUNT=\")[1];\n            let currentDate = moment(new Date(elem.start.dateTime));\n            console.log(currentDate);\n            for (let i = 0; i < numDays; i++) {\n              medsEvents.push({\n                title: elem.summary,\n                start: currentDate._d,\n                end: currentDate._d,\n                allDay: true,\n                type: \"Med\",\n              });\n              currentDate = moment(currentDate).add(1, \"days\");\n            }\n          });\n\n          return {\n            numGP: getCompletedApps(GPApps),\n            numDent: getCompletedApps(DentApps),\n            numOp: getCompletedApps(OpApps),\n            numPsych: getCompletedApps(psychApps),\n            numGyno: getCompletedApps(gynoApps),\n          };\n        });\n      });\n  });\n};\n\nexport const addNewEvent = (summary, location, start, end) => {\n  var event = {\n    summary: \"MiMedi: \" + summary,\n    location: location,\n    start: start,\n    end: end,\n  };\n  return event;\n};\n\nexport const addCalendarEvent = async (info) => {\n  return new Promise((resolve, reject) => {\n    let startRaw = new Date(info.date);\n    let endRaw = new Date(info.date);\n    endRaw.setMinutes(startRaw.getMinutes() + 30);\n\n    let start = {\n      dateTime: new Date(info.date).toISOString().toString(),\n      timeZone: \"Australia/Sydney\",\n    };\n\n    let end = {\n      dateTime: endRaw.toISOString().toString(),\n      timeZone: \"Australia/Sydney\",\n    };\n\n    var gapi = window.gapi;\n    var CLIENT_ID =\n      \"249886028801-4635vef8o4vjcgj539du52m6go3u3vnk.apps.googleusercontent.com\";\n    var API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\n    var DISCOVERY_DOCS = [\n      \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\",\n    ];\n    var SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\n\n    gapi.load(\"client:auth2\", () => {\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES,\n      });\n\n      gapi.client.load(\"calendar\", \"v3\", () => {\n        let instance = gapi.auth2.getAuthInstance().then(() => {\n          var event = addNewEvent(info.summary, info.location, start, end);\n\n          var request = gapi.client.calendar.events.insert({\n            calendarId: \"primary\",\n            resource: event,\n          });\n\n          request.execute((event) => {\n            window.open(event.htmlLink);\n            resolve(\"DONE\");\n          });\n        });\n      });\n    });\n  });\n};\n\nexport const addEvent = async (event) => {\n  return new Promise((resolve, reject) => {\n    var gapi = window.gapi;\n    var CLIENT_ID =\n      \"249886028801-4635vef8o4vjcgj539du52m6go3u3vnk.apps.googleusercontent.com\";\n    var API_KEY = \"AIzaSyBlj1VnMflja9kGA73CB4VQ1rHTa2-oOO4\";\n    var DISCOVERY_DOCS = [\n      \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\",\n    ];\n    var SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\n\n    gapi.load(\"client:auth2\", () => {\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES,\n      });\n\n      gapi.client.load(\"calendar\", \"v3\", () => {\n        let instance = gapi.auth2.getAuthInstance().then(() => {\n          var request = gapi.client.calendar.events.insert({\n            calendarId: \"primary\",\n            resource: event,\n          });\n\n          request.execute((event) => {\n            resolve(\"DONE\");\n          });\n        });\n      });\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"module"}